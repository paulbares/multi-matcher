# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 0.00% complete, ETA 00:18:40
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
21.605 ops/us
# Warmup Iteration   2: 21.684 ops/us
# Warmup Iteration   3: 22.562 ops/us
# Warmup Iteration   4: 22.536 ops/us
# Warmup Iteration   5: 22.580 ops/us
Iteration   1: 22.588 ops/us
Iteration   2: 22.504 ops/us
Iteration   3: 22.539 ops/us
Iteration   4: 22.572 ops/us
Iteration   5: 22.541 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  22.549 ±(99.9%) 0.124 ops/us [Average]
  (min, avg, max) = (22.504, 22.549, 22.588), stdev = 0.032
  CI (99.9%): [22.424, 22.673] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  66.110 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 0.89% complete, ETA 00:27:36
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
11.153 ops/us
# Warmup Iteration   2: 11.075 ops/us
# Warmup Iteration   3: 11.274 ops/us
# Warmup Iteration   4: 11.255 ops/us
# Warmup Iteration   5: 11.259 ops/us
Iteration   1: 11.271 ops/us
Iteration   2: 11.251 ops/us
Iteration   3: 11.275 ops/us
Iteration   4: 11.258 ops/us
Iteration   5: 11.260 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.263 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (11.251, 11.263, 11.275), stdev = 0.010
  CI (99.9%): [11.226, 11.300] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  125.149 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 1.79% complete, ETA 00:25:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
11.220 ops/us
# Warmup Iteration   2: 11.011 ops/us
# Warmup Iteration   3: 11.277 ops/us
# Warmup Iteration   4: 11.276 ops/us
# Warmup Iteration   5: 11.270 ops/us
Iteration   1: 11.278 ops/us
Iteration   2: 11.250 ops/us
Iteration   3: 11.279 ops/us
Iteration   4: 11.269 ops/us
Iteration   5: 11.269 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.269 ±(99.9%) 0.046 ops/us [Average]
  (min, avg, max) = (11.250, 11.269, 11.279), stdev = 0.012
  CI (99.9%): [11.223, 11.315] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  125.216 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 2.68% complete, ETA 00:24:23
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
11.036 ops/us
# Warmup Iteration   2: 11.126 ops/us
# Warmup Iteration   3: 11.260 ops/us
# Warmup Iteration   4: 11.251 ops/us
# Warmup Iteration   5: 11.250 ops/us
Iteration   1: 11.245 ops/us
Iteration   2: 11.255 ops/us
Iteration   3: 11.259 ops/us
Iteration   4: 11.211 ops/us
Iteration   5: 11.259 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.246 ±(99.9%) 0.079 ops/us [Average]
  (min, avg, max) = (11.211, 11.246, 11.259), stdev = 0.020
  CI (99.9%): [11.167, 11.325] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  125.222 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 3.57% complete, ETA 00:23:48
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
22.449 ops/us
# Warmup Iteration   2: 22.051 ops/us
# Warmup Iteration   3: 22.827 ops/us
# Warmup Iteration   4: 22.807 ops/us
# Warmup Iteration   5: 22.822 ops/us
Iteration   1: 22.722 ops/us
Iteration   2: 22.837 ops/us
Iteration   3: 22.822 ops/us
Iteration   4: 22.825 ops/us
Iteration   5: 22.826 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  22.806 ±(99.9%) 0.184 ops/us [Average]
  (min, avg, max) = (22.722, 22.806, 22.837), stdev = 0.048
  CI (99.9%): [22.623, 22.990] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  66.950 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 4.46% complete, ETA 00:23:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
11.261 ops/us
# Warmup Iteration   2: 11.183 ops/us
# Warmup Iteration   3: 11.300 ops/us
# Warmup Iteration   4: 11.277 ops/us
# Warmup Iteration   5: 11.292 ops/us
Iteration   1: 11.298 ops/us
Iteration   2: 11.300 ops/us
Iteration   3: 11.302 ops/us
Iteration   4: 11.293 ops/us
Iteration   5: 11.298 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.298 ±(99.9%) 0.013 ops/us [Average]
  (min, avg, max) = (11.293, 11.298, 11.302), stdev = 0.003
  CI (99.9%): [11.285, 11.311] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  124.046 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 5.36% complete, ETA 00:23:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
11.336 ops/us
# Warmup Iteration   2: 11.135 ops/us
# Warmup Iteration   3: 11.467 ops/us
# Warmup Iteration   4: 11.470 ops/us
# Warmup Iteration   5: 11.472 ops/us
Iteration   1: 11.460 ops/us
Iteration   2: 11.469 ops/us
Iteration   3: 11.474 ops/us
Iteration   4: 11.475 ops/us
Iteration   5: 11.457 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.467 ±(99.9%) 0.032 ops/us [Average]
  (min, avg, max) = (11.457, 11.467, 11.475), stdev = 0.008
  CI (99.9%): [11.435, 11.499] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  123.107 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 6.25% complete, ETA 00:22:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
11.085 ops/us
# Warmup Iteration   2: 11.100 ops/us
# Warmup Iteration   3: 11.248 ops/us
# Warmup Iteration   4: 11.250 ops/us
# Warmup Iteration   5: 11.249 ops/us
Iteration   1: 11.253 ops/us
Iteration   2: 11.253 ops/us
Iteration   3: 11.237 ops/us
Iteration   4: 11.231 ops/us
Iteration   5: 11.211 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.237 ±(99.9%) 0.067 ops/us [Average]
  (min, avg, max) = (11.211, 11.237, 11.253), stdev = 0.017
  CI (99.9%): [11.170, 11.304] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  122.695 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 7.14% complete, ETA 00:22:27
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
22.667 ops/us
# Warmup Iteration   2: 22.299 ops/us
# Warmup Iteration   3: 22.804 ops/us
# Warmup Iteration   4: 23.031 ops/us
# Warmup Iteration   5: 23.002 ops/us
Iteration   1: 22.837 ops/us
Iteration   2: 22.831 ops/us
Iteration   3: 22.522 ops/us
Iteration   4: 22.741 ops/us
Iteration   5: 23.038 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  22.794 ±(99.9%) 0.719 ops/us [Average]
  (min, avg, max) = (22.522, 22.794, 23.038), stdev = 0.187
  CI (99.9%): [22.075, 23.513] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  64.219 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 8.04% complete, ETA 00:22:10
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
11.384 ops/us
# Warmup Iteration   2: 11.275 ops/us
# Warmup Iteration   3: 11.412 ops/us
# Warmup Iteration   4: 11.440 ops/us
# Warmup Iteration   5: 11.443 ops/us
Iteration   1: 11.450 ops/us
Iteration   2: 11.453 ops/us
Iteration   3: 11.422 ops/us
Iteration   4: 11.440 ops/us
Iteration   5: 11.441 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.441 ±(99.9%) 0.046 ops/us [Average]
  (min, avg, max) = (11.422, 11.441, 11.453), stdev = 0.012
  CI (99.9%): [11.395, 11.487] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  122.283 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 8.93% complete, ETA 00:21:54
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
11.365 ops/us
# Warmup Iteration   2: 11.218 ops/us
# Warmup Iteration   3: 11.541 ops/us
# Warmup Iteration   4: 11.534 ops/us
# Warmup Iteration   5: 11.540 ops/us
Iteration   1: 11.540 ops/us
Iteration   2: 11.545 ops/us
Iteration   3: 11.540 ops/us
Iteration   4: 11.550 ops/us
Iteration   5: 11.535 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.542 ±(99.9%) 0.021 ops/us [Average]
  (min, avg, max) = (11.535, 11.542, 11.550), stdev = 0.006
  CI (99.9%): [11.521, 11.563] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  122.023 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 9.82% complete, ETA 00:21:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
11.280 ops/us
# Warmup Iteration   2: 11.315 ops/us
# Warmup Iteration   3: 11.307 ops/us
# Warmup Iteration   4: 11.293 ops/us
# Warmup Iteration   5: 11.314 ops/us
Iteration   1: 11.307 ops/us
Iteration   2: 11.307 ops/us
Iteration   3: 11.294 ops/us
Iteration   4: 11.318 ops/us
Iteration   5: 11.283 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.302 ±(99.9%) 0.052 ops/us [Average]
  (min, avg, max) = (11.283, 11.302, 11.318), stdev = 0.013
  CI (99.9%): [11.250, 11.354] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  121.065 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 10.71% complete, ETA 00:21:24
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
22.880 ops/us
# Warmup Iteration   2: 22.542 ops/us
# Warmup Iteration   3: 23.189 ops/us
# Warmup Iteration   4: 23.207 ops/us
# Warmup Iteration   5: 23.177 ops/us
Iteration   1: 23.147 ops/us
Iteration   2: 23.163 ops/us
Iteration   3: 23.190 ops/us
Iteration   4: 23.207 ops/us
Iteration   5: 22.809 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  23.103 ±(99.9%) 0.640 ops/us [Average]
  (min, avg, max) = (22.809, 23.103, 23.207), stdev = 0.166
  CI (99.9%): [22.463, 23.743] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  62.827 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 11.61% complete, ETA 00:21:09
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
11.946 ops/us
# Warmup Iteration   2: 11.787 ops/us
# Warmup Iteration   3: 11.966 ops/us
# Warmup Iteration   4: 11.979 ops/us
# Warmup Iteration   5: 11.970 ops/us
Iteration   1: 11.982 ops/us
Iteration   2: 11.980 ops/us
Iteration   3: 11.975 ops/us
Iteration   4: 11.986 ops/us
Iteration   5: 11.956 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.976 ±(99.9%) 0.046 ops/us [Average]
  (min, avg, max) = (11.956, 11.976, 11.986), stdev = 0.012
  CI (99.9%): [11.930, 12.021] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  113.969 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 12.50% complete, ETA 00:20:54
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
12.024 ops/us
# Warmup Iteration   2: 11.856 ops/us
# Warmup Iteration   3: 11.988 ops/us
# Warmup Iteration   4: 11.989 ops/us
# Warmup Iteration   5: 11.977 ops/us
Iteration   1: 11.985 ops/us
Iteration   2: 11.991 ops/us
Iteration   3: 11.960 ops/us
Iteration   4: 11.994 ops/us
Iteration   5: 11.947 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.975 ±(99.9%) 0.080 ops/us [Average]
  (min, avg, max) = (11.947, 11.975, 11.994), stdev = 0.021
  CI (99.9%): [11.896, 12.055] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  113.078 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset
# Parameters: (padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 13.39% complete, ETA 00:20:40
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
11.879 ops/us
# Warmup Iteration   2: 11.815 ops/us
# Warmup Iteration   3: 11.962 ops/us
# Warmup Iteration   4: 11.965 ops/us
# Warmup Iteration   5: 11.963 ops/us
Iteration   1: 11.983 ops/us
Iteration   2: 11.987 ops/us
Iteration   3: 11.996 ops/us
Iteration   4: 11.999 ops/us
Iteration   5: 11.978 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset":
  11.989 ±(99.9%) 0.034 ops/us [Average]
  (min, avg, max) = (11.978, 11.989, 11.999), stdev = 0.009
  CI (99.9%): [11.955, 12.023] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias":
  110.942 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 14.29% complete, ETA 00:20:26
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
20.706 ops/us
# Warmup Iteration   2: 21.732 ops/us
# Warmup Iteration   3: 22.537 ops/us
# Warmup Iteration   4: 22.514 ops/us
# Warmup Iteration   5: 22.499 ops/us
Iteration   1: 22.549 ops/us
Iteration   2: 22.542 ops/us
Iteration   3: 22.511 ops/us
Iteration   4: 22.541 ops/us
Iteration   5: 22.502 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  22.529 ±(99.9%) 0.081 ops/us [Average]
  (min, avg, max) = (22.502, 22.529, 22.549), stdev = 0.021
  CI (99.9%): [22.448, 22.610] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  68.213 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 15.18% complete, ETA 00:20:12
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
11.174 ops/us
# Warmup Iteration   2: 11.103 ops/us
# Warmup Iteration   3: 11.258 ops/us
# Warmup Iteration   4: 11.273 ops/us
# Warmup Iteration   5: 11.266 ops/us
Iteration   1: 11.277 ops/us
Iteration   2: 11.273 ops/us
Iteration   3: 11.279 ops/us
Iteration   4: 11.276 ops/us
Iteration   5: 11.272 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.275 ±(99.9%) 0.011 ops/us [Average]
  (min, avg, max) = (11.272, 11.275, 11.279), stdev = 0.003
  CI (99.9%): [11.265, 11.286] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  126.601 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 16.07% complete, ETA 00:19:59
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
11.256 ops/us
# Warmup Iteration   2: 11.032 ops/us
# Warmup Iteration   3: 11.279 ops/us
# Warmup Iteration   4: 11.282 ops/us
# Warmup Iteration   5: 11.279 ops/us
Iteration   1: 11.286 ops/us
Iteration   2: 11.260 ops/us
Iteration   3: 11.262 ops/us
Iteration   4: 11.274 ops/us
Iteration   5: 11.262 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.269 ±(99.9%) 0.042 ops/us [Average]
  (min, avg, max) = (11.260, 11.269, 11.286), stdev = 0.011
  CI (99.9%): [11.226, 11.311] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  126.791 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 16.96% complete, ETA 00:19:45
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
11.055 ops/us
# Warmup Iteration   2: 11.128 ops/us
# Warmup Iteration   3: 11.259 ops/us
# Warmup Iteration   4: 11.258 ops/us
# Warmup Iteration   5: 11.245 ops/us
Iteration   1: 11.257 ops/us
Iteration   2: 11.234 ops/us
Iteration   3: 11.258 ops/us
Iteration   4: 11.266 ops/us
Iteration   5: 11.245 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.252 ±(99.9%) 0.048 ops/us [Average]
  (min, avg, max) = (11.234, 11.252, 11.266), stdev = 0.013
  CI (99.9%): [11.204, 11.300] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  125.208 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 17.86% complete, ETA 00:19:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
22.467 ops/us
# Warmup Iteration   2: 22.032 ops/us
# Warmup Iteration   3: 22.819 ops/us
# Warmup Iteration   4: 22.760 ops/us
# Warmup Iteration   5: 22.843 ops/us
Iteration   1: 22.820 ops/us
Iteration   2: 22.826 ops/us
Iteration   3: 22.831 ops/us
Iteration   4: 22.825 ops/us
Iteration   5: 22.812 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  22.823 ±(99.9%) 0.028 ops/us [Average]
  (min, avg, max) = (22.812, 22.823, 22.831), stdev = 0.007
  CI (99.9%): [22.795, 22.850] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  66.896 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 18.75% complete, ETA 00:19:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
11.259 ops/us
# Warmup Iteration   2: 11.167 ops/us
# Warmup Iteration   3: 11.304 ops/us
# Warmup Iteration   4: 11.301 ops/us
# Warmup Iteration   5: 11.296 ops/us
Iteration   1: 11.297 ops/us
Iteration   2: 11.295 ops/us
Iteration   3: 11.305 ops/us
Iteration   4: 11.300 ops/us
Iteration   5: 11.299 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.299 ±(99.9%) 0.015 ops/us [Average]
  (min, avg, max) = (11.295, 11.299, 11.305), stdev = 0.004
  CI (99.9%): [11.284, 11.314] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  124.424 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 19.64% complete, ETA 00:19:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
11.339 ops/us
# Warmup Iteration   2: 11.130 ops/us
# Warmup Iteration   3: 11.460 ops/us
# Warmup Iteration   4: 11.461 ops/us
# Warmup Iteration   5: 11.466 ops/us
Iteration   1: 11.395 ops/us
Iteration   2: 11.428 ops/us
Iteration   3: 11.457 ops/us
Iteration   4: 11.418 ops/us
Iteration   5: 11.446 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.429 ±(99.9%) 0.094 ops/us [Average]
  (min, avg, max) = (11.395, 11.429, 11.457), stdev = 0.024
  CI (99.9%): [11.335, 11.523] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  125.283 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 20.54% complete, ETA 00:18:52
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
11.091 ops/us
# Warmup Iteration   2: 10.623 ops/us
# Warmup Iteration   3: 10.857 ops/us
# Warmup Iteration   4: 10.809 ops/us
# Warmup Iteration   5: 10.878 ops/us
Iteration   1: 10.677 ops/us
Iteration   2: 10.946 ops/us
Iteration   3: 11.029 ops/us
Iteration   4: 11.070 ops/us
Iteration   5: 11.139 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  10.972 ±(99.9%) 0.689 ops/us [Average]
  (min, avg, max) = (10.677, 10.972, 11.139), stdev = 0.179
  CI (99.9%): [10.283, 11.661] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  123.498 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 21.43% complete, ETA 00:18:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
22.432 ops/us
# Warmup Iteration   2: 22.208 ops/us
# Warmup Iteration   3: 22.966 ops/us
# Warmup Iteration   4: 22.993 ops/us
# Warmup Iteration   5: 22.985 ops/us
Iteration   1: 23.012 ops/us
Iteration   2: 23.008 ops/us
Iteration   3: 22.961 ops/us
Iteration   4: 23.009 ops/us
Iteration   5: 23.041 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  23.006 ±(99.9%) 0.112 ops/us [Average]
  (min, avg, max) = (22.961, 23.006, 23.041), stdev = 0.029
  CI (99.9%): [22.895, 23.118] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  65.570 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 22.32% complete, ETA 00:18:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
11.371 ops/us
# Warmup Iteration   2: 11.276 ops/us
# Warmup Iteration   3: 11.379 ops/us
# Warmup Iteration   4: 11.445 ops/us
# Warmup Iteration   5: 11.451 ops/us
Iteration   1: 11.434 ops/us
Iteration   2: 11.444 ops/us
Iteration   3: 11.457 ops/us
Iteration   4: 11.452 ops/us
Iteration   5: 11.444 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.446 ±(99.9%) 0.033 ops/us [Average]
  (min, avg, max) = (11.434, 11.446, 11.457), stdev = 0.009
  CI (99.9%): [11.413, 11.479] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  123.011 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 23.21% complete, ETA 00:18:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
11.452 ops/us
# Warmup Iteration   2: 11.256 ops/us
# Warmup Iteration   3: 11.540 ops/us
# Warmup Iteration   4: 11.552 ops/us
# Warmup Iteration   5: 11.559 ops/us
Iteration   1: 11.543 ops/us
Iteration   2: 11.554 ops/us
Iteration   3: 11.505 ops/us
Iteration   4: 11.540 ops/us
Iteration   5: 11.538 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.536 ±(99.9%) 0.072 ops/us [Average]
  (min, avg, max) = (11.505, 11.536, 11.554), stdev = 0.019
  CI (99.9%): [11.464, 11.608] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  122.494 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 24.11% complete, ETA 00:18:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
11.286 ops/us
# Warmup Iteration   2: 11.278 ops/us
# Warmup Iteration   3: 11.309 ops/us
# Warmup Iteration   4: 11.321 ops/us
# Warmup Iteration   5: 11.267 ops/us
Iteration   1: 11.307 ops/us
Iteration   2: 11.300 ops/us
Iteration   3: 11.321 ops/us
Iteration   4: 11.319 ops/us
Iteration   5: 11.304 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.310 ±(99.9%) 0.036 ops/us [Average]
  (min, avg, max) = (11.300, 11.310, 11.321), stdev = 0.009
  CI (99.9%): [11.274, 11.346] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  119.258 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 25.00% complete, ETA 00:17:49
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
22.830 ops/us
# Warmup Iteration   2: 22.562 ops/us
# Warmup Iteration   3: 23.130 ops/us
# Warmup Iteration   4: 23.190 ops/us
# Warmup Iteration   5: 23.195 ops/us
Iteration   1: 23.193 ops/us
Iteration   2: 22.914 ops/us
Iteration   3: 23.189 ops/us
Iteration   4: 23.181 ops/us
Iteration   5: 23.206 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  23.137 ±(99.9%) 0.480 ops/us [Average]
  (min, avg, max) = (22.914, 23.137, 23.206), stdev = 0.125
  CI (99.9%): [22.656, 23.617] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  63.671 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 25.89% complete, ETA 00:17:35
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
11.926 ops/us
# Warmup Iteration   2: 11.773 ops/us
# Warmup Iteration   3: 11.963 ops/us
# Warmup Iteration   4: 11.970 ops/us
# Warmup Iteration   5: 11.971 ops/us
Iteration   1: 11.956 ops/us
Iteration   2: 11.132 ops/us
Iteration   3: 11.970 ops/us
Iteration   4: 11.980 ops/us
Iteration   5: 11.973 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.802 ±(99.9%) 1.443 ops/us [Average]
  (min, avg, max) = (11.132, 11.802, 11.980), stdev = 0.375
  CI (99.9%): [10.360, 13.245] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  114.308 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 26.79% complete, ETA 00:17:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
11.996 ops/us
# Warmup Iteration   2: 11.844 ops/us
# Warmup Iteration   3: 11.974 ops/us
# Warmup Iteration   4: 11.979 ops/us
# Warmup Iteration   5: 11.985 ops/us
Iteration   1: 11.991 ops/us
Iteration   2: 11.980 ops/us
Iteration   3: 11.984 ops/us
Iteration   4: 11.986 ops/us
Iteration   5: 11.965 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.981 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (11.965, 11.981, 11.991), stdev = 0.010
  CI (99.9%): [11.944, 12.019] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  115.255 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0
# Parameters: (padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 27.68% complete, ETA 00:17:10
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
11.886 ops/us
# Warmup Iteration   2: 11.814 ops/us
# Warmup Iteration   3: 11.988 ops/us
# Warmup Iteration   4: 11.983 ops/us
# Warmup Iteration   5: 11.988 ops/us
Iteration   1: 11.972 ops/us
Iteration   2: 11.973 ops/us
Iteration   3: 11.984 ops/us
Iteration   4: 11.987 ops/us
Iteration   5: 11.965 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0":
  11.976 ±(99.9%) 0.035 ops/us [Average]
  (min, avg, max) = (11.965, 11.976, 11.987), stdev = 0.009
  CI (99.9%): [11.942, 12.011] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias":
  111.950 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 28.57% complete, ETA 00:16:57
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
28.593 ops/us
# Warmup Iteration   2: 28.612 ops/us
# Warmup Iteration   3: 28.725 ops/us
# Warmup Iteration   4: 28.754 ops/us
# Warmup Iteration   5: 28.705 ops/us
Iteration   1: 28.772 ops/us
Iteration   2: 28.755 ops/us
Iteration   3: 28.779 ops/us
Iteration   4: 28.773 ops/us
Iteration   5: 28.739 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  28.764 ±(99.9%) 0.063 ops/us [Average]
  (min, avg, max) = (28.739, 28.764, 28.779), stdev = 0.016
  CI (99.9%): [28.700, 28.827] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  3.004 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 29.46% complete, ETA 00:16:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
28.190 ops/us
# Warmup Iteration   2: 28.187 ops/us
# Warmup Iteration   3: 29.176 ops/us
# Warmup Iteration   4: 29.199 ops/us
# Warmup Iteration   5: 29.175 ops/us
Iteration   1: 29.187 ops/us
Iteration   2: 29.165 ops/us
Iteration   3: 29.184 ops/us
Iteration   4: 29.172 ops/us
Iteration   5: 29.184 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.178 ±(99.9%) 0.036 ops/us [Average]
  (min, avg, max) = (29.165, 29.178, 29.187), stdev = 0.009
  CI (99.9%): [29.142, 29.215] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  4.636 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 30.36% complete, ETA 00:16:31
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
28.233 ops/us
# Warmup Iteration   2: 28.339 ops/us
# Warmup Iteration   3: 29.137 ops/us
# Warmup Iteration   4: 29.137 ops/us
# Warmup Iteration   5: 29.093 ops/us
Iteration   1: 29.137 ops/us
Iteration   2: 29.060 ops/us
Iteration   3: 29.120 ops/us
Iteration   4: 29.118 ops/us
Iteration   5: 29.083 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.104 ±(99.9%) 0.120 ops/us [Average]
  (min, avg, max) = (29.060, 29.104, 29.137), stdev = 0.031
  CI (99.9%): [28.984, 29.223] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  4.349 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 31.25% complete, ETA 00:16:18
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
28.210 ops/us
# Warmup Iteration   2: 28.168 ops/us
# Warmup Iteration   3: 28.998 ops/us
# Warmup Iteration   4: 28.986 ops/us
# Warmup Iteration   5: 29.015 ops/us
Iteration   1: 29.021 ops/us
Iteration   2: 28.995 ops/us
Iteration   3: 29.005 ops/us
Iteration   4: 29.007 ops/us
Iteration   5: 29.000 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.006 ±(99.9%) 0.038 ops/us [Average]
  (min, avg, max) = (28.995, 29.006, 29.021), stdev = 0.010
  CI (99.9%): [28.968, 29.044] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  5.264 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 32.14% complete, ETA 00:16:05
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
28.644 ops/us
# Warmup Iteration   2: 28.594 ops/us
# Warmup Iteration   3: 26.518 ops/us
# Warmup Iteration   4: 28.870 ops/us
# Warmup Iteration   5: 28.861 ops/us
Iteration   1: 28.888 ops/us
Iteration   2: 28.877 ops/us
Iteration   3: 28.881 ops/us
Iteration   4: 28.878 ops/us
Iteration   5: 28.884 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  28.882 ±(99.9%) 0.018 ops/us [Average]
  (min, avg, max) = (28.877, 28.882, 28.888), stdev = 0.005
  CI (99.9%): [28.864, 28.899] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.200 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 33.04% complete, ETA 00:15:52
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
28.192 ops/us
# Warmup Iteration   2: 28.195 ops/us
# Warmup Iteration   3: 29.168 ops/us
# Warmup Iteration   4: 29.144 ops/us
# Warmup Iteration   5: 29.189 ops/us
Iteration   1: 29.184 ops/us
Iteration   2: 29.168 ops/us
Iteration   3: 29.166 ops/us
Iteration   4: 29.079 ops/us
Iteration   5: 29.200 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.159 ±(99.9%) 0.182 ops/us [Average]
  (min, avg, max) = (29.079, 29.159, 29.200), stdev = 0.047
  CI (99.9%): [28.978, 29.341] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  4.477 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 33.93% complete, ETA 00:15:40
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
28.295 ops/us
# Warmup Iteration   2: 28.369 ops/us
# Warmup Iteration   3: 29.172 ops/us
# Warmup Iteration   4: 29.041 ops/us
# Warmup Iteration   5: 29.154 ops/us
Iteration   1: 29.099 ops/us
Iteration   2: 29.146 ops/us
Iteration   3: 29.113 ops/us
Iteration   4: 29.146 ops/us
Iteration   5: 29.121 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.125 ±(99.9%) 0.080 ops/us [Average]
  (min, avg, max) = (29.099, 29.125, 29.146), stdev = 0.021
  CI (99.9%): [29.045, 29.205] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  3.449 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 34.82% complete, ETA 00:15:27
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
28.289 ops/us
# Warmup Iteration   2: 28.230 ops/us
# Warmup Iteration   3: 29.186 ops/us
# Warmup Iteration   4: 29.166 ops/us
# Warmup Iteration   5: 29.184 ops/us
Iteration   1: 29.197 ops/us
Iteration   2: 29.177 ops/us
Iteration   3: 29.185 ops/us
Iteration   4: 29.196 ops/us
Iteration   5: 29.208 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.193 ±(99.9%) 0.045 ops/us [Average]
  (min, avg, max) = (29.177, 29.193, 29.208), stdev = 0.012
  CI (99.9%): [29.148, 29.237] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  3.175 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 35.71% complete, ETA 00:15:14
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
28.628 ops/us
# Warmup Iteration   2: 28.592 ops/us
# Warmup Iteration   3: 28.902 ops/us
# Warmup Iteration   4: 28.867 ops/us
# Warmup Iteration   5: 28.877 ops/us
Iteration   1: 28.857 ops/us
Iteration   2: 28.902 ops/us
Iteration   3: 28.901 ops/us
Iteration   4: 28.879 ops/us
Iteration   5: 28.894 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  28.887 ±(99.9%) 0.074 ops/us [Average]
  (min, avg, max) = (28.857, 28.887, 28.902), stdev = 0.019
  CI (99.9%): [28.813, 28.960] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.205 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 36.61% complete, ETA 00:15:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
27.745 ops/us
# Warmup Iteration   2: 28.095 ops/us
# Warmup Iteration   3: 29.194 ops/us
# Warmup Iteration   4: 29.168 ops/us
# Warmup Iteration   5: 29.182 ops/us
Iteration   1: 29.141 ops/us
Iteration   2: 29.180 ops/us
Iteration   3: 29.035 ops/us
Iteration   4: 29.172 ops/us
Iteration   5: 29.147 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.135 ±(99.9%) 0.224 ops/us [Average]
  (min, avg, max) = (29.035, 29.135, 29.180), stdev = 0.058
  CI (99.9%): [28.911, 29.359] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  3.372 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 37.50% complete, ETA 00:14:48
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
28.180 ops/us
# Warmup Iteration   2: 28.307 ops/us
# Warmup Iteration   3: 29.113 ops/us
# Warmup Iteration   4: 29.069 ops/us
# Warmup Iteration   5: 29.101 ops/us
Iteration   1: 29.002 ops/us
Iteration   2: 29.119 ops/us
Iteration   3: 29.104 ops/us
Iteration   4: 29.087 ops/us
Iteration   5: 29.110 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.084 ±(99.9%) 0.183 ops/us [Average]
  (min, avg, max) = (29.002, 29.084, 29.119), stdev = 0.048
  CI (99.9%): [28.901, 29.267] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  2.932 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 38.39% complete, ETA 00:14:36
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
28.268 ops/us
# Warmup Iteration   2: 28.207 ops/us
# Warmup Iteration   3: 29.234 ops/us
# Warmup Iteration   4: 29.270 ops/us
# Warmup Iteration   5: 29.232 ops/us
Iteration   1: 29.245 ops/us
Iteration   2: 29.253 ops/us
Iteration   3: 29.232 ops/us
Iteration   4: 29.261 ops/us
Iteration   5: 29.291 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.256 ±(99.9%) 0.086 ops/us [Average]
  (min, avg, max) = (29.232, 29.256, 29.291), stdev = 0.022
  CI (99.9%): [29.170, 29.343] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.337 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 39.29% complete, ETA 00:14:23
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
28.573 ops/us
# Warmup Iteration   2: 28.718 ops/us
# Warmup Iteration   3: 28.875 ops/us
# Warmup Iteration   4: 28.872 ops/us
# Warmup Iteration   5: 28.892 ops/us
Iteration   1: 28.861 ops/us
Iteration   2: 28.873 ops/us
Iteration   3: 28.887 ops/us
Iteration   4: 28.894 ops/us
Iteration   5: 28.877 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  28.879 ±(99.9%) 0.049 ops/us [Average]
  (min, avg, max) = (28.861, 28.879, 28.894), stdev = 0.013
  CI (99.9%): [28.829, 28.928] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.204 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 40.18% complete, ETA 00:14:10
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
27.985 ops/us
# Warmup Iteration   2: 28.026 ops/us
# Warmup Iteration   3: 29.234 ops/us
# Warmup Iteration   4: 29.239 ops/us
# Warmup Iteration   5: 29.275 ops/us
Iteration   1: 29.235 ops/us
Iteration   2: 29.269 ops/us
Iteration   3: 29.229 ops/us
Iteration   4: 29.210 ops/us
Iteration   5: 29.245 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.238 ±(99.9%) 0.083 ops/us [Average]
  (min, avg, max) = (29.210, 29.238, 29.269), stdev = 0.022
  CI (99.9%): [29.155, 29.321] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.966 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 41.07% complete, ETA 00:13:57
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
28.147 ops/us
# Warmup Iteration   2: 28.242 ops/us
# Warmup Iteration   3: 29.139 ops/us
# Warmup Iteration   4: 29.142 ops/us
# Warmup Iteration   5: 29.014 ops/us
Iteration   1: 29.084 ops/us
Iteration   2: 28.626 ops/us
Iteration   3: 29.170 ops/us
Iteration   4: 29.127 ops/us
Iteration   5: 29.158 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.033 ±(99.9%) 0.885 ops/us [Average]
  (min, avg, max) = (28.626, 29.033, 29.170), stdev = 0.230
  CI (99.9%): [28.148, 29.918] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.519 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256
# Parameters: (padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 41.96% complete, ETA 00:13:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
28.294 ops/us
# Warmup Iteration   2: 28.237 ops/us
# Warmup Iteration   3: 29.232 ops/us
# Warmup Iteration   4: 29.302 ops/us
# Warmup Iteration   5: 29.275 ops/us
Iteration   1: 29.280 ops/us
Iteration   2: 29.303 ops/us
Iteration   3: 29.139 ops/us
Iteration   4: 29.287 ops/us
Iteration   5: 29.303 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256":
  29.262 ±(99.9%) 0.269 ops/us [Average]
  (min, avg, max) = (29.139, 29.262, 29.303), stdev = 0.070
  CI (99.9%): [28.993, 29.532] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias":
  1.201 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 42.86% complete, ETA 00:13:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
6.453 ops/us
# Warmup Iteration   2: 6.498 ops/us
# Warmup Iteration   3: 6.563 ops/us
# Warmup Iteration   4: 6.566 ops/us
# Warmup Iteration   5: 6.566 ops/us
Iteration   1: 6.568 ops/us
Iteration   2: 6.565 ops/us
Iteration   3: 6.557 ops/us
Iteration   4: 6.567 ops/us
Iteration   5: 6.561 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.564 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (6.557, 6.564, 6.568), stdev = 0.005
  CI (99.9%): [6.546, 6.581] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  251.350 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 43.75% complete, ETA 00:13:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
6.457 ops/us
# Warmup Iteration   2: 6.506 ops/us
# Warmup Iteration   3: 6.570 ops/us
# Warmup Iteration   4: 6.568 ops/us
# Warmup Iteration   5: 6.572 ops/us
Iteration   1: 6.573 ops/us
Iteration   2: 6.562 ops/us
Iteration   3: 6.570 ops/us
Iteration   4: 6.573 ops/us
Iteration   5: 6.569 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.569 ±(99.9%) 0.018 ops/us [Average]
  (min, avg, max) = (6.562, 6.569, 6.573), stdev = 0.005
  CI (99.9%): [6.551, 6.588] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  249.908 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 44.64% complete, ETA 00:13:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
6.116 ops/us
# Warmup Iteration   2: 6.203 ops/us
# Warmup Iteration   3: 6.255 ops/us
# Warmup Iteration   4: 6.262 ops/us
# Warmup Iteration   5: 6.260 ops/us
Iteration   1: 6.255 ops/us
Iteration   2: 6.255 ops/us
Iteration   3: 6.261 ops/us
Iteration   4: 6.261 ops/us
Iteration   5: 6.256 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.258 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (6.255, 6.258, 6.261), stdev = 0.003
  CI (99.9%): [6.246, 6.270] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  249.241 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 45.54% complete, ETA 00:12:53
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
5.923 ops/us
# Warmup Iteration   2: 5.912 ops/us
# Warmup Iteration   3: 5.981 ops/us
# Warmup Iteration   4: 5.984 ops/us
# Warmup Iteration   5: 5.990 ops/us
Iteration   1: 5.995 ops/us
Iteration   2: 5.987 ops/us
Iteration   3: 5.996 ops/us
Iteration   4: 5.972 ops/us
Iteration   5: 5.990 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  5.988 ±(99.9%) 0.036 ops/us [Average]
  (min, avg, max) = (5.972, 5.988, 5.996), stdev = 0.009
  CI (99.9%): [5.952, 6.024] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  250.010 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 46.43% complete, ETA 00:12:41
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
6.349 ops/us
# Warmup Iteration   2: 6.391 ops/us
# Warmup Iteration   3: 6.434 ops/us
# Warmup Iteration   4: 6.434 ops/us
# Warmup Iteration   5: 6.422 ops/us
Iteration   1: 6.429 ops/us
Iteration   2: 6.434 ops/us
Iteration   3: 6.433 ops/us
Iteration   4: 6.428 ops/us
Iteration   5: 6.422 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.429 ±(99.9%) 0.018 ops/us [Average]
  (min, avg, max) = (6.422, 6.429, 6.434), stdev = 0.005
  CI (99.9%): [6.411, 6.447] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  241.041 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 47.32% complete, ETA 00:12:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
6.715 ops/us
# Warmup Iteration   2: 6.761 ops/us
# Warmup Iteration   3: 6.823 ops/us
# Warmup Iteration   4: 6.818 ops/us
# Warmup Iteration   5: 6.819 ops/us
Iteration   1: 6.828 ops/us
Iteration   2: 6.817 ops/us
Iteration   3: 6.829 ops/us
Iteration   4: 6.824 ops/us
Iteration   5: 6.818 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.823 ±(99.9%) 0.021 ops/us [Average]
  (min, avg, max) = (6.817, 6.823, 6.829), stdev = 0.005
  CI (99.9%): [6.802, 6.844] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  220.636 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 48.21% complete, ETA 00:12:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
7.269 ops/us
# Warmup Iteration   2: 7.295 ops/us
# Warmup Iteration   3: 7.385 ops/us
# Warmup Iteration   4: 7.380 ops/us
# Warmup Iteration   5: 7.384 ops/us
Iteration   1: 7.387 ops/us
Iteration   2: 7.383 ops/us
Iteration   3: 7.386 ops/us
Iteration   4: 7.384 ops/us
Iteration   5: 7.383 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  7.385 ±(99.9%) 0.007 ops/us [Average]
  (min, avg, max) = (7.383, 7.385, 7.387), stdev = 0.002
  CI (99.9%): [7.377, 7.392] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  186.636 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 49.11% complete, ETA 00:12:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
7.672 ops/us
# Warmup Iteration   2: 7.696 ops/us
# Warmup Iteration   3: 7.815 ops/us
# Warmup Iteration   4: 7.807 ops/us
# Warmup Iteration   5: 7.817 ops/us
Iteration   1: 7.820 ops/us
Iteration   2: 7.809 ops/us
Iteration   3: 7.824 ops/us
Iteration   4: 7.817 ops/us
Iteration   5: 7.817 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  7.817 ±(99.9%) 0.022 ops/us [Average]
  (min, avg, max) = (7.809, 7.817, 7.824), stdev = 0.006
  CI (99.9%): [7.795, 7.840] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  162.238 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 50.00% complete, ETA 00:11:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
7.972 ops/us
# Warmup Iteration   2: 7.997 ops/us
# Warmup Iteration   3: 8.141 ops/us
# Warmup Iteration   4: 8.139 ops/us
# Warmup Iteration   5: 8.147 ops/us
Iteration   1: 8.147 ops/us
Iteration   2: 8.134 ops/us
Iteration   3: 8.132 ops/us
Iteration   4: 8.118 ops/us
Iteration   5: 8.148 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.136 ±(99.9%) 0.048 ops/us [Average]
  (min, avg, max) = (8.118, 8.136, 8.148), stdev = 0.012
  CI (99.9%): [8.088, 8.183] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  145.529 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 50.89% complete, ETA 00:11:37
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
8.312 ops/us
# Warmup Iteration   2: 8.329 ops/us
# Warmup Iteration   3: 8.529 ops/us
# Warmup Iteration   4: 8.526 ops/us
# Warmup Iteration   5: 8.528 ops/us
Iteration   1: 8.511 ops/us
Iteration   2: 8.526 ops/us
Iteration   3: 8.510 ops/us
Iteration   4: 8.523 ops/us
Iteration   5: 8.526 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.519 ±(99.9%) 0.032 ops/us [Average]
  (min, avg, max) = (8.510, 8.519, 8.526), stdev = 0.008
  CI (99.9%): [8.488, 8.551] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  79.687 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 51.79% complete, ETA 00:11:24
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
8.455 ops/us
# Warmup Iteration   2: 8.480 ops/us
# Warmup Iteration   3: 8.601 ops/us
# Warmup Iteration   4: 8.587 ops/us
# Warmup Iteration   5: 8.605 ops/us
Iteration   1: 8.598 ops/us
Iteration   2: 8.596 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.602 ops/us
Iteration   5: 8.287 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.538 ±(99.9%) 0.539 ops/us [Average]
  (min, avg, max) = (8.287, 8.538, 8.606), stdev = 0.140
  CI (99.9%): [7.998, 9.077] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  2.062 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 52.68% complete, ETA 00:11:12
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
8.384 ops/us
# Warmup Iteration   2: 8.489 ops/us
# Warmup Iteration   3: 8.604 ops/us
# Warmup Iteration   4: 8.603 ops/us
# Warmup Iteration   5: 8.603 ops/us
Iteration   1: 8.583 ops/us
Iteration   2: 8.609 ops/us
Iteration   3: 8.610 ops/us
Iteration   4: 8.607 ops/us
Iteration   5: 8.603 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.043 ops/us [Average]
  (min, avg, max) = (8.583, 8.603, 8.610), stdev = 0.011
  CI (99.9%): [8.560, 8.646] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.183 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 53.57% complete, ETA 00:10:59
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
8.461 ops/us
# Warmup Iteration   2: 7.955 ops/us
# Warmup Iteration   3: 8.611 ops/us
# Warmup Iteration   4: 8.598 ops/us
# Warmup Iteration   5: 8.608 ops/us
Iteration   1: 8.602 ops/us
Iteration   2: 8.603 ops/us
Iteration   3: 8.583 ops/us
Iteration   4: 8.600 ops/us
Iteration   5: 8.598 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.597 ±(99.9%) 0.031 ops/us [Average]
  (min, avg, max) = (8.583, 8.597, 8.603), stdev = 0.008
  CI (99.9%): [8.566, 8.628] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.065 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 54.46% complete, ETA 00:10:46
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
8.460 ops/us
# Warmup Iteration   2: 8.490 ops/us
# Warmup Iteration   3: 8.610 ops/us
# Warmup Iteration   4: 8.360 ops/us
# Warmup Iteration   5: 8.601 ops/us
Iteration   1: 8.574 ops/us
Iteration   2: 8.608 ops/us
Iteration   3: 8.608 ops/us
Iteration   4: 8.607 ops/us
Iteration   5: 8.608 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.601 ±(99.9%) 0.058 ops/us [Average]
  (min, avg, max) = (8.574, 8.601, 8.608), stdev = 0.015
  CI (99.9%): [8.543, 8.659] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.028 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 55.36% complete, ETA 00:10:33
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
8.469 ops/us
# Warmup Iteration   2: 8.498 ops/us
# Warmup Iteration   3: 8.602 ops/us
# Warmup Iteration   4: 8.597 ops/us
# Warmup Iteration   5: 8.591 ops/us
Iteration   1: 8.602 ops/us
Iteration   2: 8.604 ops/us
Iteration   3: 8.603 ops/us
Iteration   4: 8.603 ops/us
Iteration   5: 8.610 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.604 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (8.602, 8.604, 8.610), stdev = 0.003
  CI (99.9%): [8.593, 8.616] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.022 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 0, padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 56.25% complete, ETA 00:10:21
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
8.470 ops/us
# Warmup Iteration   2: 8.497 ops/us
# Warmup Iteration   3: 8.601 ops/us
# Warmup Iteration   4: 8.603 ops/us
# Warmup Iteration   5: 8.603 ops/us
Iteration   1: 8.605 ops/us
Iteration   2: 8.604 ops/us
Iteration   3: 8.608 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.602 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.606 ±(99.9%) 0.010 ops/us [Average]
  (min, avg, max) = (8.602, 8.606, 8.609), stdev = 0.003
  CI (99.9%): [8.595, 8.616] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.024 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 57.14% complete, ETA 00:10:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
8.470 ops/us
# Warmup Iteration   2: 8.493 ops/us
# Warmup Iteration   3: 8.274 ops/us
# Warmup Iteration   4: 8.291 ops/us
# Warmup Iteration   5: 8.293 ops/us
Iteration   1: 8.297 ops/us
Iteration   2: 8.280 ops/us
Iteration   3: 8.289 ops/us
Iteration   4: 8.276 ops/us
Iteration   5: 8.274 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.283 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (8.274, 8.283, 8.297), stdev = 0.010
  CI (99.9%): [8.246, 8.321] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.006 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 58.04% complete, ETA 00:09:55
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
7.921 ops/us
# Warmup Iteration   2: 8.480 ops/us
# Warmup Iteration   3: 8.599 ops/us
# Warmup Iteration   4: 8.603 ops/us
# Warmup Iteration   5: 8.577 ops/us
Iteration   1: 8.604 ops/us
Iteration   2: 8.596 ops/us
Iteration   3: 8.609 ops/us
Iteration   4: 8.604 ops/us
Iteration   5: 8.599 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.019 ops/us [Average]
  (min, avg, max) = (8.596, 8.603, 8.609), stdev = 0.005
  CI (99.9%): [8.583, 8.622] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.016 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 58.93% complete, ETA 00:09:42
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
8.452 ops/us
# Warmup Iteration   2: 8.478 ops/us
# Warmup Iteration   3: 8.577 ops/us
# Warmup Iteration   4: 8.606 ops/us
# Warmup Iteration   5: 8.602 ops/us
Iteration   1: 8.610 ops/us
Iteration   2: 8.610 ops/us
Iteration   3: 8.605 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.611 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.609 ±(99.9%) 0.008 ops/us [Average]
  (min, avg, max) = (8.605, 8.609, 8.611), stdev = 0.002
  CI (99.9%): [8.601, 8.617] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.031 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 59.82% complete, ETA 00:09:30
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
8.466 ops/us
# Warmup Iteration   2: 7.981 ops/us
# Warmup Iteration   3: 8.604 ops/us
# Warmup Iteration   4: 8.120 ops/us
# Warmup Iteration   5: 8.603 ops/us
Iteration   1: 8.607 ops/us
Iteration   2: 8.610 ops/us
Iteration   3: 8.600 ops/us
Iteration   4: 8.604 ops/us
Iteration   5: 8.595 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.024 ops/us [Average]
  (min, avg, max) = (8.595, 8.603, 8.610), stdev = 0.006
  CI (99.9%): [8.579, 8.627] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.040 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 60.71% complete, ETA 00:09:17
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
8.462 ops/us
# Warmup Iteration   2: 8.499 ops/us
# Warmup Iteration   3: 8.284 ops/us
# Warmup Iteration   4: 8.284 ops/us
# Warmup Iteration   5: 8.292 ops/us
Iteration   1: 8.274 ops/us
Iteration   2: 8.310 ops/us
Iteration   3: 8.284 ops/us
Iteration   4: 8.287 ops/us
Iteration   5: 8.308 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.293 ±(99.9%) 0.060 ops/us [Average]
  (min, avg, max) = (8.274, 8.293, 8.310), stdev = 0.016
  CI (99.9%): [8.233, 8.353] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.017 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 61.61% complete, ETA 00:09:04
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
8.467 ops/us
# Warmup Iteration   2: 8.496 ops/us
# Warmup Iteration   3: 8.605 ops/us
# Warmup Iteration   4: 8.604 ops/us
# Warmup Iteration   5: 8.600 ops/us
Iteration   1: 8.610 ops/us
Iteration   2: 8.596 ops/us
Iteration   3: 8.600 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.603 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.604 ±(99.9%) 0.022 ops/us [Average]
  (min, avg, max) = (8.596, 8.604, 8.610), stdev = 0.006
  CI (99.9%): [8.582, 8.625] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.004 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 62.50% complete, ETA 00:08:51
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
7.941 ops/us
# Warmup Iteration   2: 8.486 ops/us
# Warmup Iteration   3: 8.563 ops/us
# Warmup Iteration   4: 8.596 ops/us
# Warmup Iteration   5: 8.598 ops/us
Iteration   1: 8.602 ops/us
Iteration   2: 8.603 ops/us
Iteration   3: 8.603 ops/us
Iteration   4: 8.612 ops/us
Iteration   5: 8.608 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.606 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (8.602, 8.606, 8.612), stdev = 0.004
  CI (99.9%): [8.588, 8.623] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.004 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 63.39% complete, ETA 00:08:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
8.475 ops/us
# Warmup Iteration   2: 8.501 ops/us
# Warmup Iteration   3: 8.600 ops/us
# Warmup Iteration   4: 8.609 ops/us
# Warmup Iteration   5: 8.602 ops/us
Iteration   1: 8.612 ops/us
Iteration   2: 8.608 ops/us
Iteration   3: 8.607 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.603 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.608 ±(99.9%) 0.013 ops/us [Average]
  (min, avg, max) = (8.603, 8.608, 8.612), stdev = 0.003
  CI (99.9%): [8.595, 8.621] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.004 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 64.29% complete, ETA 00:08:26
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
8.453 ops/us
# Warmup Iteration   2: 8.485 ops/us
# Warmup Iteration   3: 8.598 ops/us
# Warmup Iteration   4: 8.607 ops/us
# Warmup Iteration   5: 8.588 ops/us
Iteration   1: 8.598 ops/us
Iteration   2: 8.599 ops/us
Iteration   3: 8.602 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.604 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.602 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (8.598, 8.602, 8.609), stdev = 0.004
  CI (99.9%): [8.585, 8.619] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.001 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 65.18% complete, ETA 00:08:13
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
8.468 ops/us
# Warmup Iteration   2: 7.982 ops/us
# Warmup Iteration   3: 8.608 ops/us
# Warmup Iteration   4: 8.602 ops/us
# Warmup Iteration   5: 8.593 ops/us
Iteration   1: 8.609 ops/us
Iteration   2: 8.609 ops/us
Iteration   3: 8.605 ops/us
Iteration   4: 8.600 ops/us
Iteration   5: 8.598 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.604 ±(99.9%) 0.020 ops/us [Average]
  (min, avg, max) = (8.598, 8.604, 8.609), stdev = 0.005
  CI (99.9%): [8.584, 8.624] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 66.07% complete, ETA 00:08:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
8.467 ops/us
# Warmup Iteration   2: 8.489 ops/us
# Warmup Iteration   3: 8.249 ops/us
# Warmup Iteration   4: 8.238 ops/us
# Warmup Iteration   5: 8.246 ops/us
Iteration   1: 8.252 ops/us
Iteration   2: 8.250 ops/us
Iteration   3: 8.243 ops/us
Iteration   4: 8.250 ops/us
Iteration   5: 8.254 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.250 ±(99.9%) 0.016 ops/us [Average]
  (min, avg, max) = (8.243, 8.250, 8.254), stdev = 0.004
  CI (99.9%): [8.234, 8.265] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.003 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 66.96% complete, ETA 00:07:48
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
8.464 ops/us
# Warmup Iteration   2: 8.495 ops/us
# Warmup Iteration   3: 8.603 ops/us
# Warmup Iteration   4: 8.609 ops/us
# Warmup Iteration   5: 8.598 ops/us
Iteration   1: 8.605 ops/us
Iteration   2: 8.607 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.602 ops/us
Iteration   5: 8.576 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.599 ±(99.9%) 0.051 ops/us [Average]
  (min, avg, max) = (8.576, 8.599, 8.607), stdev = 0.013
  CI (99.9%): [8.548, 8.651] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.017 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 67.86% complete, ETA 00:07:35
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
8.472 ops/us
# Warmup Iteration   2: 8.491 ops/us
# Warmup Iteration   3: 8.602 ops/us
# Warmup Iteration   4: 8.608 ops/us
# Warmup Iteration   5: 8.608 ops/us
Iteration   1: 8.609 ops/us
Iteration   2: 8.588 ops/us
Iteration   3: 8.605 ops/us
Iteration   4: 8.598 ops/us
Iteration   5: 8.596 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.599 ±(99.9%) 0.032 ops/us [Average]
  (min, avg, max) = (8.588, 8.599, 8.609), stdev = 0.008
  CI (99.9%): [8.567, 8.631] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.010 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 68.75% complete, ETA 00:07:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
8.473 ops/us
# Warmup Iteration   2: 8.496 ops/us
# Warmup Iteration   3: 8.602 ops/us
# Warmup Iteration   4: 8.606 ops/us
# Warmup Iteration   5: 8.592 ops/us
Iteration   1: 8.611 ops/us
Iteration   2: 8.608 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.613 ops/us
Iteration   5: 8.602 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.608 ±(99.9%) 0.016 ops/us [Average]
  (min, avg, max) = (8.602, 8.608, 8.613), stdev = 0.004
  CI (99.9%): [8.592, 8.624] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.007 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 69.64% complete, ETA 00:07:10
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
8.472 ops/us
# Warmup Iteration   2: 8.476 ops/us
# Warmup Iteration   3: 8.604 ops/us
# Warmup Iteration   4: 8.609 ops/us
# Warmup Iteration   5: 8.604 ops/us
Iteration   1: 8.611 ops/us
Iteration   2: 8.591 ops/us
Iteration   3: 8.608 ops/us
Iteration   4: 8.611 ops/us
Iteration   5: 8.605 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.605 ±(99.9%) 0.033 ops/us [Average]
  (min, avg, max) = (8.591, 8.605, 8.611), stdev = 0.008
  CI (99.9%): [8.573, 8.638] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 256, padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 70.54% complete, ETA 00:06:57
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
8.453 ops/us
# Warmup Iteration   2: 7.973 ops/us
# Warmup Iteration   3: 8.607 ops/us
# Warmup Iteration   4: 8.604 ops/us
# Warmup Iteration   5: 8.601 ops/us
Iteration   1: 8.604 ops/us
Iteration   2: 8.600 ops/us
Iteration   3: 8.607 ops/us
Iteration   4: 8.602 ops/us
Iteration   5: 8.571 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.597 ±(99.9%) 0.056 ops/us [Average]
  (min, avg, max) = (8.571, 8.597, 8.607), stdev = 0.015
  CI (99.9%): [8.540, 8.653] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.010 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 71.43% complete, ETA 00:06:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
6.459 ops/us
# Warmup Iteration   2: 6.498 ops/us
# Warmup Iteration   3: 6.567 ops/us
# Warmup Iteration   4: 6.565 ops/us
# Warmup Iteration   5: 6.561 ops/us
Iteration   1: 6.560 ops/us
Iteration   2: 6.542 ops/us
Iteration   3: 6.565 ops/us
Iteration   4: 6.565 ops/us
Iteration   5: 6.565 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.559 ±(99.9%) 0.039 ops/us [Average]
  (min, avg, max) = (6.542, 6.559, 6.565), stdev = 0.010
  CI (99.9%): [6.521, 6.598] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  251.691 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 72.32% complete, ETA 00:06:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
6.462 ops/us
# Warmup Iteration   2: 6.507 ops/us
# Warmup Iteration   3: 6.575 ops/us
# Warmup Iteration   4: 6.569 ops/us
# Warmup Iteration   5: 6.568 ops/us
Iteration   1: 6.565 ops/us
Iteration   2: 6.570 ops/us
Iteration   3: 6.573 ops/us
Iteration   4: 6.570 ops/us
Iteration   5: 6.567 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.569 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (6.565, 6.569, 6.573), stdev = 0.003
  CI (99.9%): [6.557, 6.581] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  250.253 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 73.21% complete, ETA 00:06:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
6.163 ops/us
# Warmup Iteration   2: 6.196 ops/us
# Warmup Iteration   3: 6.264 ops/us
# Warmup Iteration   4: 6.261 ops/us
# Warmup Iteration   5: 6.256 ops/us
Iteration   1: 6.264 ops/us
Iteration   2: 6.257 ops/us
Iteration   3: 6.262 ops/us
Iteration   4: 6.263 ops/us
Iteration   5: 6.265 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.263 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (6.257, 6.263, 6.265), stdev = 0.003
  CI (99.9%): [6.251, 6.274] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  251.103 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 74.11% complete, ETA 00:06:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
5.927 ops/us
# Warmup Iteration   2: 5.969 ops/us
# Warmup Iteration   3: 5.996 ops/us
# Warmup Iteration   4: 5.985 ops/us
# Warmup Iteration   5: 5.998 ops/us
Iteration   1: 5.997 ops/us
Iteration   2: 5.998 ops/us
Iteration   3: 5.996 ops/us
Iteration   4: 5.985 ops/us
Iteration   5: 5.982 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  5.992 ±(99.9%) 0.028 ops/us [Average]
  (min, avg, max) = (5.982, 5.992, 5.998), stdev = 0.007
  CI (99.9%): [5.963, 6.020] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  250.510 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 75.00% complete, ETA 00:05:54
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
6.354 ops/us
# Warmup Iteration   2: 6.391 ops/us
# Warmup Iteration   3: 6.434 ops/us
# Warmup Iteration   4: 6.424 ops/us
# Warmup Iteration   5: 6.433 ops/us
Iteration   1: 6.432 ops/us
Iteration   2: 6.404 ops/us
Iteration   3: 6.424 ops/us
Iteration   4: 6.427 ops/us
Iteration   5: 6.431 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.423 ±(99.9%) 0.043 ops/us [Average]
  (min, avg, max) = (6.404, 6.423, 6.432), stdev = 0.011
  CI (99.9%): [6.380, 6.467] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  240.148 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 75.89% complete, ETA 00:05:41
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
6.718 ops/us
# Warmup Iteration   2: 6.764 ops/us
# Warmup Iteration   3: 6.823 ops/us
# Warmup Iteration   4: 6.807 ops/us
# Warmup Iteration   5: 6.827 ops/us
Iteration   1: 6.826 ops/us
Iteration   2: 6.829 ops/us
Iteration   3: 6.825 ops/us
Iteration   4: 6.817 ops/us
Iteration   5: 6.829 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  6.825 ±(99.9%) 0.019 ops/us [Average]
  (min, avg, max) = (6.817, 6.825, 6.829), stdev = 0.005
  CI (99.9%): [6.806, 6.844] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  219.737 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 76.79% complete, ETA 00:05:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
7.267 ops/us
# Warmup Iteration   2: 7.289 ops/us
# Warmup Iteration   3: 7.374 ops/us
# Warmup Iteration   4: 7.383 ops/us
# Warmup Iteration   5: 7.382 ops/us
Iteration   1: 7.383 ops/us
Iteration   2: 7.378 ops/us
Iteration   3: 7.388 ops/us
Iteration   4: 7.383 ops/us
Iteration   5: 7.383 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  7.383 ±(99.9%) 0.013 ops/us [Average]
  (min, avg, max) = (7.378, 7.383, 7.388), stdev = 0.003
  CI (99.9%): [7.370, 7.396] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  185.563 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 77.68% complete, ETA 00:05:16
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
7.672 ops/us
# Warmup Iteration   2: 7.695 ops/us
# Warmup Iteration   3: 7.823 ops/us
# Warmup Iteration   4: 7.816 ops/us
# Warmup Iteration   5: 7.822 ops/us
Iteration   1: 7.823 ops/us
Iteration   2: 7.811 ops/us
Iteration   3: 7.820 ops/us
Iteration   4: 7.813 ops/us
Iteration   5: 7.820 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  7.817 ±(99.9%) 0.019 ops/us [Average]
  (min, avg, max) = (7.811, 7.817, 7.823), stdev = 0.005
  CI (99.9%): [7.798, 7.836] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  160.793 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 78.57% complete, ETA 00:05:03
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
7.968 ops/us
# Warmup Iteration   2: 7.994 ops/us
# Warmup Iteration   3: 8.145 ops/us
# Warmup Iteration   4: 8.145 ops/us
# Warmup Iteration   5: 8.140 ops/us
Iteration   1: 8.136 ops/us
Iteration   2: 8.142 ops/us
Iteration   3: 8.141 ops/us
Iteration   4: 8.129 ops/us
Iteration   5: 8.141 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.138 ±(99.9%) 0.022 ops/us [Average]
  (min, avg, max) = (8.129, 8.138, 8.142), stdev = 0.006
  CI (99.9%): [8.116, 8.159] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  144.858 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 79.46% complete, ETA 00:04:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
8.304 ops/us
# Warmup Iteration   2: 8.329 ops/us
# Warmup Iteration   3: 8.525 ops/us
# Warmup Iteration   4: 8.482 ops/us
# Warmup Iteration   5: 8.514 ops/us
Iteration   1: 8.521 ops/us
Iteration   2: 8.521 ops/us
Iteration   3: 8.528 ops/us
Iteration   4: 8.520 ops/us
Iteration   5: 8.535 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.525 ±(99.9%) 0.024 ops/us [Average]
  (min, avg, max) = (8.520, 8.525, 8.535), stdev = 0.006
  CI (99.9%): [8.500, 8.549] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  80.262 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 80.36% complete, ETA 00:04:38
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
8.438 ops/us
# Warmup Iteration   2: 8.497 ops/us
# Warmup Iteration   3: 8.609 ops/us
# Warmup Iteration   4: 8.602 ops/us
# Warmup Iteration   5: 8.598 ops/us
Iteration   1: 8.593 ops/us
Iteration   2: 8.607 ops/us
Iteration   3: 8.605 ops/us
Iteration   4: 8.612 ops/us
Iteration   5: 8.606 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.605 ±(99.9%) 0.027 ops/us [Average]
  (min, avg, max) = (8.593, 8.605, 8.612), stdev = 0.007
  CI (99.9%): [8.577, 8.632] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  2.068 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 81.25% complete, ETA 00:04:25
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
7.932 ops/us
# Warmup Iteration   2: 8.482 ops/us
# Warmup Iteration   3: 8.593 ops/us
# Warmup Iteration   4: 8.596 ops/us
# Warmup Iteration   5: 8.607 ops/us
Iteration   1: 8.592 ops/us
Iteration   2: 8.603 ops/us
Iteration   3: 8.590 ops/us
Iteration   4: 8.593 ops/us
Iteration   5: 8.605 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.597 ±(99.9%) 0.027 ops/us [Average]
  (min, avg, max) = (8.590, 8.597, 8.605), stdev = 0.007
  CI (99.9%): [8.570, 8.624] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.186 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 82.14% complete, ETA 00:04:12
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
8.463 ops/us
# Warmup Iteration   2: 8.490 ops/us
# Warmup Iteration   3: 8.607 ops/us
# Warmup Iteration   4: 8.598 ops/us
# Warmup Iteration   5: 8.599 ops/us
Iteration   1: 8.587 ops/us
Iteration   2: 8.606 ops/us
Iteration   3: 8.613 ops/us
Iteration   4: 8.600 ops/us
Iteration   5: 8.605 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.602 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (8.587, 8.602, 8.613), stdev = 0.010
  CI (99.9%): [8.565, 8.640] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.061 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 83.04% complete, ETA 00:04:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
8.460 ops/us
# Warmup Iteration   2: 8.487 ops/us
# Warmup Iteration   3: 8.485 ops/us
# Warmup Iteration   4: 8.564 ops/us
# Warmup Iteration   5: 8.585 ops/us
Iteration   1: 8.594 ops/us
Iteration   2: 8.606 ops/us
Iteration   3: 8.600 ops/us
Iteration   4: 8.604 ops/us
Iteration   5: 8.604 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.601 ±(99.9%) 0.018 ops/us [Average]
  (min, avg, max) = (8.594, 8.601, 8.606), stdev = 0.005
  CI (99.9%): [8.584, 8.619] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.030 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 83.93% complete, ETA 00:03:47
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
8.393 ops/us
# Warmup Iteration   2: 8.476 ops/us
# Warmup Iteration   3: 8.608 ops/us
# Warmup Iteration   4: 8.599 ops/us
# Warmup Iteration   5: 8.606 ops/us
Iteration   1: 8.598 ops/us
Iteration   2: 8.611 ops/us
Iteration   3: 8.611 ops/us
Iteration   4: 8.599 ops/us
Iteration   5: 8.606 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.605 ±(99.9%) 0.024 ops/us [Average]
  (min, avg, max) = (8.598, 8.605, 8.611), stdev = 0.006
  CI (99.9%): [8.581, 8.629] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.015 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 512, padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 84.82% complete, ETA 00:03:34
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
8.463 ops/us
# Warmup Iteration   2: 8.497 ops/us
# Warmup Iteration   3: 8.279 ops/us
# Warmup Iteration   4: 8.300 ops/us
# Warmup Iteration   5: 8.277 ops/us
Iteration   1: 8.294 ops/us
Iteration   2: 8.281 ops/us
Iteration   3: 8.278 ops/us
Iteration   4: 8.296 ops/us
Iteration   5: 8.275 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.285 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (8.275, 8.285, 8.296), stdev = 0.010
  CI (99.9%): [8.248, 8.322] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.019 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 0, sourceSize = 1024, targetSize = 256)

# Run progress: 85.71% complete, ETA 00:03:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ad8
8.452 ops/us
# Warmup Iteration   2: 8.490 ops/us
# Warmup Iteration   3: 8.600 ops/us
# Warmup Iteration   4: 8.602 ops/us
# Warmup Iteration   5: 8.604 ops/us
Iteration   1: 8.593 ops/us
Iteration   2: 8.608 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.605 ops/us
Iteration   5: 8.610 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.604 ±(99.9%) 0.026 ops/us [Average]
  (min, avg, max) = (8.593, 8.604, 8.610), stdev = 0.007
  CI (99.9%): [8.578, 8.630] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.154 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 8, sourceSize = 1024, targetSize = 256)

# Run progress: 86.61% complete, ETA 00:03:09
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae0
8.496 ops/us
# Warmup Iteration   2: 8.528 ops/us
# Warmup Iteration   3: 8.622 ops/us
# Warmup Iteration   4: 8.631 ops/us
# Warmup Iteration   5: 8.639 ops/us
Iteration   1: 8.636 ops/us
Iteration   2: 8.642 ops/us
Iteration   3: 8.624 ops/us
Iteration   4: 8.639 ops/us
Iteration   5: 8.642 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.637 ±(99.9%) 0.029 ops/us [Average]
  (min, avg, max) = (8.624, 8.637, 8.642), stdev = 0.007
  CI (99.9%): [8.608, 8.665] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  0.017 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 16, sourceSize = 1024, targetSize = 256)

# Run progress: 87.50% complete, ETA 00:02:56
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854ae8
8.468 ops/us
# Warmup Iteration   2: 8.483 ops/us
# Warmup Iteration   3: 8.247 ops/us
# Warmup Iteration   4: 8.252 ops/us
# Warmup Iteration   5: 8.254 ops/us
Iteration   1: 8.242 ops/us
Iteration   2: 8.250 ops/us
Iteration   3: 8.246 ops/us
Iteration   4: 8.254 ops/us
Iteration   5: 8.227 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.244 ±(99.9%) 0.040 ops/us [Average]
  (min, avg, max) = (8.227, 8.244, 8.254), stdev = 0.010
  CI (99.9%): [8.204, 8.284] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.014 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 24, sourceSize = 1024, targetSize = 256)

# Run progress: 88.39% complete, ETA 00:02:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af0
8.465 ops/us
# Warmup Iteration   2: 8.496 ops/us
# Warmup Iteration   3: 8.594 ops/us
# Warmup Iteration   4: 8.611 ops/us
# Warmup Iteration   5: 8.610 ops/us
Iteration   1: 8.603 ops/us
Iteration   2: 8.607 ops/us
Iteration   3: 8.581 ops/us
Iteration   4: 8.609 ops/us
Iteration   5: 8.610 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.602 ±(99.9%) 0.046 ops/us [Average]
  (min, avg, max) = (8.581, 8.602, 8.610), stdev = 0.012
  CI (99.9%): [8.556, 8.649] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.029 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 32, sourceSize = 1024, targetSize = 256)

# Run progress: 89.29% complete, ETA 00:02:31
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854af8
8.469 ops/us
# Warmup Iteration   2: 8.497 ops/us
# Warmup Iteration   3: 8.609 ops/us
# Warmup Iteration   4: 8.610 ops/us
# Warmup Iteration   5: 8.600 ops/us
Iteration   1: 8.604 ops/us
Iteration   2: 8.584 ops/us
Iteration   3: 8.603 ops/us
Iteration   4: 8.602 ops/us
Iteration   5: 8.593 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.597 ±(99.9%) 0.034 ops/us [Average]
  (min, avg, max) = (8.584, 8.597, 8.604), stdev = 0.009
  CI (99.9%): [8.563, 8.631] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.020 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 40, sourceSize = 1024, targetSize = 256)

# Run progress: 90.18% complete, ETA 00:02:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b00
8.452 ops/us
# Warmup Iteration   2: 8.488 ops/us
# Warmup Iteration   3: 8.591 ops/us
# Warmup Iteration   4: 8.608 ops/us
# Warmup Iteration   5: 8.604 ops/us
Iteration   1: 8.604 ops/us
Iteration   2: 8.610 ops/us
Iteration   3: 8.594 ops/us
Iteration   4: 8.607 ops/us
Iteration   5: 8.597 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.026 ops/us [Average]
  (min, avg, max) = (8.594, 8.603, 8.610), stdev = 0.007
  CI (99.9%): [8.577, 8.628] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.010 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 48, sourceSize = 1024, targetSize = 256)

# Run progress: 91.07% complete, ETA 00:02:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b08
7.937 ops/us
# Warmup Iteration   2: 8.492 ops/us
# Warmup Iteration   3: 8.601 ops/us
# Warmup Iteration   4: 8.609 ops/us
# Warmup Iteration   5: 8.595 ops/us
Iteration   1: 8.611 ops/us
Iteration   2: 8.609 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.607 ops/us
Iteration   5: 8.602 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.607 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (8.602, 8.607, 8.611), stdev = 0.003
  CI (99.9%): [8.595, 8.619] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.014 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 56, sourceSize = 1024, targetSize = 256)

# Run progress: 91.96% complete, ETA 00:01:53
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b10
8.466 ops/us
# Warmup Iteration   2: 8.495 ops/us
# Warmup Iteration   3: 8.599 ops/us
# Warmup Iteration   4: 8.601 ops/us
# Warmup Iteration   5: 8.596 ops/us
Iteration   1: 8.604 ops/us
Iteration   2: 8.602 ops/us
Iteration   3: 8.578 ops/us
Iteration   4: 8.596 ops/us
Iteration   5: 8.607 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.597 ±(99.9%) 0.044 ops/us [Average]
  (min, avg, max) = (8.578, 8.597, 8.607), stdev = 0.011
  CI (99.9%): [8.554, 8.641] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 64, sourceSize = 1024, targetSize = 256)

# Run progress: 92.86% complete, ETA 00:01:41
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b18
8.473 ops/us
# Warmup Iteration   2: 7.999 ops/us
# Warmup Iteration   3: 8.600 ops/us
# Warmup Iteration   4: 8.603 ops/us
# Warmup Iteration   5: 8.569 ops/us
Iteration   1: 8.603 ops/us
Iteration   2: 8.608 ops/us
Iteration   3: 8.599 ops/us
Iteration   4: 8.613 ops/us
Iteration   5: 8.595 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.027 ops/us [Average]
  (min, avg, max) = (8.595, 8.603, 8.613), stdev = 0.007
  CI (99.9%): [8.577, 8.630] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 72, sourceSize = 1024, targetSize = 256)

# Run progress: 93.75% complete, ETA 00:01:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b20
8.479 ops/us
# Warmup Iteration   2: 8.496 ops/us
# Warmup Iteration   3: 8.601 ops/us
# Warmup Iteration   4: 8.589 ops/us
# Warmup Iteration   5: 8.599 ops/us
Iteration   1: 8.600 ops/us
Iteration   2: 8.604 ops/us
Iteration   3: 8.599 ops/us
Iteration   4: 8.610 ops/us
Iteration   5: 8.604 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (8.599, 8.603, 8.610), stdev = 0.004
  CI (99.9%): [8.586, 8.620] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.012 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 80, sourceSize = 1024, targetSize = 256)

# Run progress: 94.64% complete, ETA 00:01:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b28
8.474 ops/us
# Warmup Iteration   2: 8.496 ops/us
# Warmup Iteration   3: 8.601 ops/us
# Warmup Iteration   4: 8.608 ops/us
# Warmup Iteration   5: 8.598 ops/us
Iteration   1: 8.605 ops/us
Iteration   2: 8.598 ops/us
Iteration   3: 8.606 ops/us
Iteration   4: 8.607 ops/us
Iteration   5: 8.599 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.603 ±(99.9%) 0.016 ops/us [Average]
  (min, avg, max) = (8.598, 8.603, 8.607), stdev = 0.004
  CI (99.9%): [8.587, 8.620] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.017 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 88, sourceSize = 1024, targetSize = 256)

# Run progress: 95.54% complete, ETA 00:01:03
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b30
7.931 ops/us
# Warmup Iteration   2: 8.488 ops/us
# Warmup Iteration   3: 8.603 ops/us
# Warmup Iteration   4: 8.603 ops/us
# Warmup Iteration   5: 8.599 ops/us
Iteration   1: 8.597 ops/us
Iteration   2: 8.599 ops/us
Iteration   3: 8.605 ops/us
Iteration   4: 8.592 ops/us
Iteration   5: 8.594 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.598 ±(99.9%) 0.020 ops/us [Average]
  (min, avg, max) = (8.592, 8.598, 8.605), stdev = 0.005
  CI (99.9%): [8.578, 8.617] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 96, sourceSize = 1024, targetSize = 256)

# Run progress: 96.43% complete, ETA 00:00:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b38
8.465 ops/us
# Warmup Iteration   2: 8.489 ops/us
# Warmup Iteration   3: 8.608 ops/us
# Warmup Iteration   4: 8.606 ops/us
# Warmup Iteration   5: 8.574 ops/us
Iteration   1: 8.572 ops/us
Iteration   2: 8.585 ops/us
Iteration   3: 8.603 ops/us
Iteration   4: 8.608 ops/us
Iteration   5: 8.595 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.593 ±(99.9%) 0.055 ops/us [Average]
  (min, avg, max) = (8.572, 8.593, 8.608), stdev = 0.014
  CI (99.9%): [8.538, 8.648] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.008 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 104, sourceSize = 1024, targetSize = 256)

# Run progress: 97.32% complete, ETA 00:00:37
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b40
8.464 ops/us
# Warmup Iteration   2: 8.463 ops/us
# Warmup Iteration   3: 8.606 ops/us
# Warmup Iteration   4: 8.605 ops/us
# Warmup Iteration   5: 8.601 ops/us
Iteration   1: 8.611 ops/us
Iteration   2: 8.593 ops/us
Iteration   3: 8.608 ops/us
Iteration   4: 8.604 ops/us
Iteration   5: 8.609 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.605 ±(99.9%) 0.028 ops/us [Average]
  (min, avg, max) = (8.593, 8.605, 8.611), stdev = 0.007
  CI (99.9%): [8.577, 8.633] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 112, sourceSize = 1024, targetSize = 256)

# Run progress: 98.21% complete, ETA 00:00:25
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b48
8.449 ops/us
# Warmup Iteration   2: 8.486 ops/us
# Warmup Iteration   3: 8.603 ops/us
# Warmup Iteration   4: 8.598 ops/us
# Warmup Iteration   5: 8.603 ops/us
Iteration   1: 8.612 ops/us
Iteration   2: 8.600 ops/us
Iteration   3: 8.611 ops/us
Iteration   4: 8.602 ops/us
Iteration   5: 8.605 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.606 ±(99.9%) 0.021 ops/us [Average]
  (min, avg, max) = (8.600, 8.606, 8.612), stdev = 0.005
  CI (99.9%): [8.585, 8.627] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.014 #/op


# JMH version: 1.23
# VM version: JDK 13.0.1, OpenJDK 64-Bit Server VM, 13.0.1+9-Ubuntu-218.04
# VM invoker: /usr/lib/jvm/java-13-openjdk-amd64/bin/java
# VM options: -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:+AlwaysPreTouch
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset
# Parameters: (offset = 768, padding = 120, sourceSize = 1024, targetSize = 256)

# Run progress: 99.11% complete, ETA 00:00:12
# Fork: 1 of 1
# Preparing profilers: LinuxPerfNormProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. sun.jvm.hotspot.memory.Universe.getNarrowOopBase()
source:708852ab8
gap:708854ac8
target:708854b50
7.932 ops/us
# Warmup Iteration   2: 8.481 ops/us
# Warmup Iteration   3: 8.606 ops/us
# Warmup Iteration   4: 8.607 ops/us
# Warmup Iteration   5: 8.608 ops/us
Iteration   1: 8.610 ops/us
Iteration   2: 8.601 ops/us
Iteration   3: 8.608 ops/us
Iteration   4: 8.612 ops/us
Iteration   5: 8.603 ops/us
# Processing profiler results: LinuxPerfNormProfiler 


Result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset":
  8.607 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (8.601, 8.607, 8.612), stdev = 0.005
  CI (99.9%): [8.589, 8.624] (assumes normal distribution)

Secondary result "io.github.richardstartin.multimatcher.benchmarks.LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias":
  1.005 #/op


# Run complete. Total time: 00:23:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      (offset)  (padding)  (sourceSize)  (targetSize)   Mode  Cnt    Score   Error   Units
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A          0          1024           256  thrpt    5   22.549 ± 0.124  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A          0          1024           256  thrpt        66.110            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A          8          1024           256  thrpt    5   11.263 ± 0.037  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A          8          1024           256  thrpt       125.149            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         16          1024           256  thrpt    5   11.269 ± 0.046  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         16          1024           256  thrpt       125.216            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         24          1024           256  thrpt    5   11.246 ± 0.079  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         24          1024           256  thrpt       125.222            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         32          1024           256  thrpt    5   22.806 ± 0.184  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         32          1024           256  thrpt        66.950            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         40          1024           256  thrpt    5   11.298 ± 0.013  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         40          1024           256  thrpt       124.046            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         48          1024           256  thrpt    5   11.467 ± 0.032  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         48          1024           256  thrpt       123.107            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         56          1024           256  thrpt    5   11.237 ± 0.067  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         56          1024           256  thrpt       122.695            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         64          1024           256  thrpt    5   22.794 ± 0.719  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         64          1024           256  thrpt        64.219            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         72          1024           256  thrpt    5   11.441 ± 0.046  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         72          1024           256  thrpt       122.283            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         80          1024           256  thrpt    5   11.542 ± 0.021  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         80          1024           256  thrpt       122.023            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         88          1024           256  thrpt    5   11.302 ± 0.052  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         88          1024           256  thrpt       121.065            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A         96          1024           256  thrpt    5   23.103 ± 0.640  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A         96          1024           256  thrpt        62.827            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A        104          1024           256  thrpt    5   11.976 ± 0.046  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A        104          1024           256  thrpt       113.969            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A        112          1024           256  thrpt    5   11.975 ± 0.080  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A        112          1024           256  thrpt       113.078            #/op
LogicalAggregationBenchmark.intersectionNoOffset                                                    N/A        120          1024           256  thrpt    5   11.989 ± 0.034  ops/us
LogicalAggregationBenchmark.intersectionNoOffset:ld_blocks_partial.address_alias                    N/A        120          1024           256  thrpt       110.942            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A          0          1024           256  thrpt    5   22.529 ± 0.081  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A          0          1024           256  thrpt        68.213            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A          8          1024           256  thrpt    5   11.275 ± 0.011  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A          8          1024           256  thrpt       126.601            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         16          1024           256  thrpt    5   11.269 ± 0.042  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         16          1024           256  thrpt       126.791            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         24          1024           256  thrpt    5   11.252 ± 0.048  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         24          1024           256  thrpt       125.208            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         32          1024           256  thrpt    5   22.823 ± 0.028  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         32          1024           256  thrpt        66.896            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         40          1024           256  thrpt    5   11.299 ± 0.015  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         40          1024           256  thrpt       124.424            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         48          1024           256  thrpt    5   11.429 ± 0.094  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         48          1024           256  thrpt       125.283            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         56          1024           256  thrpt    5   10.972 ± 0.689  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         56          1024           256  thrpt       123.498            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         64          1024           256  thrpt    5   23.006 ± 0.112  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         64          1024           256  thrpt        65.570            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         72          1024           256  thrpt    5   11.446 ± 0.033  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         72          1024           256  thrpt       123.011            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         80          1024           256  thrpt    5   11.536 ± 0.072  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         80          1024           256  thrpt       122.494            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         88          1024           256  thrpt    5   11.310 ± 0.036  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         88          1024           256  thrpt       119.258            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A         96          1024           256  thrpt    5   23.137 ± 0.480  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A         96          1024           256  thrpt        63.671            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A        104          1024           256  thrpt    5   11.802 ± 1.443  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A        104          1024           256  thrpt       114.308            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A        112          1024           256  thrpt    5   11.981 ± 0.037  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A        112          1024           256  thrpt       115.255            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset0                                         N/A        120          1024           256  thrpt    5   11.976 ± 0.035  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset0:ld_blocks_partial.address_alias         N/A        120          1024           256  thrpt       111.950            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A          0          1024           256  thrpt    5   28.764 ± 0.063  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A          0          1024           256  thrpt         3.004            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A          8          1024           256  thrpt    5   29.178 ± 0.036  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A          8          1024           256  thrpt         4.636            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         16          1024           256  thrpt    5   29.104 ± 0.120  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         16          1024           256  thrpt         4.349            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         24          1024           256  thrpt    5   29.006 ± 0.038  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         24          1024           256  thrpt         5.264            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         32          1024           256  thrpt    5   28.882 ± 0.018  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         32          1024           256  thrpt         1.200            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         40          1024           256  thrpt    5   29.159 ± 0.182  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         40          1024           256  thrpt         4.477            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         48          1024           256  thrpt    5   29.125 ± 0.080  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         48          1024           256  thrpt         3.449            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         56          1024           256  thrpt    5   29.193 ± 0.045  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         56          1024           256  thrpt         3.175            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         64          1024           256  thrpt    5   28.887 ± 0.074  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         64          1024           256  thrpt         1.205            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         72          1024           256  thrpt    5   29.135 ± 0.224  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         72          1024           256  thrpt         3.372            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         80          1024           256  thrpt    5   29.084 ± 0.183  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         80          1024           256  thrpt         2.932            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         88          1024           256  thrpt    5   29.256 ± 0.086  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         88          1024           256  thrpt         1.337            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A         96          1024           256  thrpt    5   28.879 ± 0.049  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A         96          1024           256  thrpt         1.204            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A        104          1024           256  thrpt    5   29.238 ± 0.083  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A        104          1024           256  thrpt         1.966            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A        112          1024           256  thrpt    5   29.033 ± 0.885  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A        112          1024           256  thrpt         1.519            #/op
LogicalAggregationBenchmark.intersectionWithConstantOffset256                                       N/A        120          1024           256  thrpt    5   29.262 ± 0.269  ops/us
LogicalAggregationBenchmark.intersectionWithConstantOffset256:ld_blocks_partial.address_alias       N/A        120          1024           256  thrpt         1.201            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0          0          1024           256  thrpt    5    6.564 ± 0.017  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0          0          1024           256  thrpt       251.350            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0          8          1024           256  thrpt    5    6.569 ± 0.018  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0          8          1024           256  thrpt       249.908            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         16          1024           256  thrpt    5    6.258 ± 0.012  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         16          1024           256  thrpt       249.241            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         24          1024           256  thrpt    5    5.988 ± 0.036  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         24          1024           256  thrpt       250.010            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         32          1024           256  thrpt    5    6.429 ± 0.018  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         32          1024           256  thrpt       241.041            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         40          1024           256  thrpt    5    6.823 ± 0.021  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         40          1024           256  thrpt       220.636            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         48          1024           256  thrpt    5    7.385 ± 0.007  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         48          1024           256  thrpt       186.636            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         56          1024           256  thrpt    5    7.817 ± 0.022  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         56          1024           256  thrpt       162.238            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         64          1024           256  thrpt    5    8.136 ± 0.048  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         64          1024           256  thrpt       145.529            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         72          1024           256  thrpt    5    8.519 ± 0.032  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         72          1024           256  thrpt        79.687            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         80          1024           256  thrpt    5    8.538 ± 0.539  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         80          1024           256  thrpt         2.062            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         88          1024           256  thrpt    5    8.603 ± 0.043  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         88          1024           256  thrpt         1.183            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0         96          1024           256  thrpt    5    8.597 ± 0.031  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0         96          1024           256  thrpt         1.065            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0        104          1024           256  thrpt    5    8.601 ± 0.058  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0        104          1024           256  thrpt         1.028            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0        112          1024           256  thrpt    5    8.604 ± 0.012  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0        112          1024           256  thrpt         1.022            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                    0        120          1024           256  thrpt    5    8.606 ± 0.010  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                    0        120          1024           256  thrpt         1.024            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256          0          1024           256  thrpt    5    8.283 ± 0.037  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256          0          1024           256  thrpt         1.006            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256          8          1024           256  thrpt    5    8.603 ± 0.019  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256          8          1024           256  thrpt         1.016            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         16          1024           256  thrpt    5    8.609 ± 0.008  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         16          1024           256  thrpt         1.031            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         24          1024           256  thrpt    5    8.603 ± 0.024  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         24          1024           256  thrpt         1.040            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         32          1024           256  thrpt    5    8.293 ± 0.060  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         32          1024           256  thrpt         1.017            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         40          1024           256  thrpt    5    8.604 ± 0.022  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         40          1024           256  thrpt         1.004            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         48          1024           256  thrpt    5    8.606 ± 0.017  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         48          1024           256  thrpt         1.004            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         56          1024           256  thrpt    5    8.608 ± 0.013  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         56          1024           256  thrpt         1.004            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         64          1024           256  thrpt    5    8.602 ± 0.017  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         64          1024           256  thrpt         1.001            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         72          1024           256  thrpt    5    8.604 ± 0.020  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         72          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         80          1024           256  thrpt    5    8.250 ± 0.016  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         80          1024           256  thrpt         1.003            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         88          1024           256  thrpt    5    8.599 ± 0.051  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         88          1024           256  thrpt         1.017            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256         96          1024           256  thrpt    5    8.599 ± 0.032  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256         96          1024           256  thrpt         1.010            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256        104          1024           256  thrpt    5    8.608 ± 0.016  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256        104          1024           256  thrpt         1.007            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256        112          1024           256  thrpt    5    8.605 ± 0.033  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256        112          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  256        120          1024           256  thrpt    5    8.597 ± 0.056  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  256        120          1024           256  thrpt         1.010            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512          0          1024           256  thrpt    5    6.559 ± 0.039  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512          0          1024           256  thrpt       251.691            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512          8          1024           256  thrpt    5    6.569 ± 0.012  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512          8          1024           256  thrpt       250.253            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         16          1024           256  thrpt    5    6.263 ± 0.012  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         16          1024           256  thrpt       251.103            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         24          1024           256  thrpt    5    5.992 ± 0.028  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         24          1024           256  thrpt       250.510            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         32          1024           256  thrpt    5    6.423 ± 0.043  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         32          1024           256  thrpt       240.148            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         40          1024           256  thrpt    5    6.825 ± 0.019  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         40          1024           256  thrpt       219.737            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         48          1024           256  thrpt    5    7.383 ± 0.013  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         48          1024           256  thrpt       185.563            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         56          1024           256  thrpt    5    7.817 ± 0.019  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         56          1024           256  thrpt       160.793            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         64          1024           256  thrpt    5    8.138 ± 0.022  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         64          1024           256  thrpt       144.858            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         72          1024           256  thrpt    5    8.525 ± 0.024  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         72          1024           256  thrpt        80.262            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         80          1024           256  thrpt    5    8.605 ± 0.027  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         80          1024           256  thrpt         2.068            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         88          1024           256  thrpt    5    8.597 ± 0.027  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         88          1024           256  thrpt         1.186            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512         96          1024           256  thrpt    5    8.602 ± 0.037  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512         96          1024           256  thrpt         1.061            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512        104          1024           256  thrpt    5    8.601 ± 0.018  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512        104          1024           256  thrpt         1.030            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512        112          1024           256  thrpt    5    8.605 ± 0.024  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512        112          1024           256  thrpt         1.015            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  512        120          1024           256  thrpt    5    8.285 ± 0.037  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  512        120          1024           256  thrpt         1.019            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768          0          1024           256  thrpt    5    8.604 ± 0.026  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768          0          1024           256  thrpt         1.154            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768          8          1024           256  thrpt    5    8.637 ± 0.029  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768          8          1024           256  thrpt         0.017            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         16          1024           256  thrpt    5    8.244 ± 0.040  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         16          1024           256  thrpt         1.014            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         24          1024           256  thrpt    5    8.602 ± 0.046  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         24          1024           256  thrpt         1.029            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         32          1024           256  thrpt    5    8.597 ± 0.034  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         32          1024           256  thrpt         1.020            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         40          1024           256  thrpt    5    8.603 ± 0.026  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         40          1024           256  thrpt         1.010            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         48          1024           256  thrpt    5    8.607 ± 0.012  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         48          1024           256  thrpt         1.014            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         56          1024           256  thrpt    5    8.597 ± 0.044  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         56          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         64          1024           256  thrpt    5    8.603 ± 0.027  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         64          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         72          1024           256  thrpt    5    8.603 ± 0.017  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         72          1024           256  thrpt         1.012            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         80          1024           256  thrpt    5    8.603 ± 0.016  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         80          1024           256  thrpt         1.017            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         88          1024           256  thrpt    5    8.598 ± 0.020  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         88          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768         96          1024           256  thrpt    5    8.593 ± 0.055  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768         96          1024           256  thrpt         1.008            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768        104          1024           256  thrpt    5    8.605 ± 0.028  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768        104          1024           256  thrpt         1.005            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768        112          1024           256  thrpt    5    8.606 ± 0.021  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768        112          1024           256  thrpt         1.014            #/op
LogicalAggregationBenchmark.intersectionWithOffset                                                  768        120          1024           256  thrpt    5    8.607 ± 0.017  ops/us
LogicalAggregationBenchmark.intersectionWithOffset:ld_blocks_partial.address_alias                  768        120          1024           256  thrpt         1.005            #/op

Benchmark result is saved to perfnorm.csv
